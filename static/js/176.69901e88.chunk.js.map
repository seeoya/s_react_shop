{"version":3,"file":"static/js/176.69901e88.chunk.js","mappings":"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","sources":["routes/Detail.js"],"sourcesContent":["import { useContext, useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Nav, Link } from \"react-bootstrap\";\r\nimport styled, { css } from \"styled-components\";\r\nimport { Context1 } from \"./../App\";\r\nimport { useSelector, useDispatch } from \"react-redux/es/exports\";\r\nimport { addCart, changeRecent } from \"../store\";\r\n\r\nlet _PUBLIC_URL = process.env.PUBLIC_URL;\r\n\r\nlet DfBtn = styled.button`\r\n    padding: 10px;\r\n    background: #ffff00;\r\n    color: #000;\r\n`;\r\n\r\nlet DefaultBox = styled.div`\r\n    padding: 30px;\r\n    border: 1px solid #000;\r\n\r\n    // 네스팅 가능\r\n    button {\r\n        border: 3px solid;\r\n\r\n        &.pp {\r\n            font-size: 2rem;\r\n        }\r\n    }\r\n`;\r\n\r\n// 선언한 스타일 재사용\r\nlet DdBtn = styled(DfBtn)`\r\n    // props 가져오기, if문 사용 가능\r\n    color: ${(props) => props.color || \"blue\"};\r\n\r\n    ${(props) =>\r\n        props.big &&\r\n        css`\r\n            width: 100px;\r\n            height: 60px;\r\n        `}\r\n`;\r\n\r\nfunction Detail(props) {\r\n    // 보관함 내용 사용. object 형식으로 담김\r\n    // let a = useContext(Context1);\r\n    // console.log(a);\r\n    let { stock, shoes } = useContext(Context1);\r\n\r\n    let [ttestt, setTtestt] = useState(true);\r\n    let [iValue, setIValue] = useState(\"\");\r\n    let [tab, setTab] = useState(0);\r\n\r\n    let state = useSelector((state) => {\r\n        return state;\r\n    });\r\n    let dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        // mount, update 될 때 (렌더링 될 때) 실행됨.\r\n        // html 렌더링 이후에 작동.\r\n        // 어려운 연산, 서버에서 데이터 가져오기, 타이머 등 여기에 적으면 좋음\r\n\r\n        if (ttestt) {\r\n            setTimeout(() => {\r\n                let box = document.getElementsByClassName(\"ttestt\")[0];\r\n                if (box) {\r\n                    box.style.display = \"none\";\r\n                    setTtestt(false);\r\n                    console.log(\"use Effect 실행\");\r\n                }\r\n            }, 1000);\r\n        }\r\n\r\n        // clean up. 아래 return은 useEffect 실행되기 전에 실행됨.\r\n        return () => {\r\n            // 클린업 함수 위치\r\n            // 기존 타이머 제거하는 등.\r\n            // 초기 mount 시에는 실행 안 되지만 unmount 시에는 실행됨\r\n            console.log(\"리턴 먼저 실행\");\r\n        };\r\n    }, [ttestt]);\r\n    // dependency\r\n    // [] 안에 state를 넣으면 해당 state가 변경될 때만 변경. []로 비워두면 한번만 실행\r\n\r\n    useEffect(() => {\r\n        let a = /\\D/g;\r\n\r\n        if (a.test(iValue)) {\r\n            alert(\"숫자만 입력하세요.\");\r\n            setIValue(iValue.replace(a, \"\"));\r\n        }\r\n    }, [iValue]);\r\n\r\n    useEffect(() => {\r\n        if (shoe) {\r\n            dispatch(changeRecent(shoe.id));\r\n        }\r\n\r\n        // dispatch();\r\n    });\r\n\r\n    // :id 자리에 적은 거\r\n    let { id } = useParams(),\r\n        // arr[id]로 찾을 경우, 정렬 등으로 state 변경 시 문제 발생\r\n        shoe = props.shoes.find((o) => o.id == id);\r\n\r\n    if (shoe) {\r\n        return (\r\n            <>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-md-6\">\r\n                            <img src={_PUBLIC_URL + \"/img/banner/sub_banner\" + shoe.id + \".jpg\"} alt=\"\" style={{ width: \"100%\" }} />\r\n                        </div>\r\n                        <div className=\"col-md-6\">\r\n                            <h4 className=\"pt-5\">\r\n                                {shoe.title} {id}\r\n                            </h4>\r\n                            <p>{shoe.content}</p>\r\n                            <p>{shoe.price}</p>\r\n                            <button className=\"btn btn-danger\" onClick={() => dispatch(addCart(shoe))}>\r\n                                주문하기\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <br />\r\n                <div>\r\n                    <h3>input 테스트</h3>\r\n                    <div>{iValue}</div>\r\n                    <input type=\"text\" placeholder=\"숫자만 입력하세요.\" onChange={changeIValue} value={iValue} />\r\n                </div>\r\n\r\n                <br />\r\n\r\n                <div>\r\n                    <h3>setTime 테스트</h3>\r\n                    <button onClick={() => setTtestt(!ttestt)}>박스를 {ttestt ? \"끕니다\" : \"켭니다\"}</button>\r\n                    {ttestt ? (\r\n                        <div className=\"ttestt\" style={{ background: \"yellow\" }}>\r\n                            시간제 or 토글 박스\r\n                        </div>\r\n                    ) : null}\r\n                </div>\r\n\r\n                {/* <DefaultBox>\r\n                    <DfBtn>123</DfBtn>\r\n                    <DdBtn className=\"pp\" color=\"#f0f\">\r\n                        1234\r\n                    </DdBtn>\r\n                    <DdBtn big>1234</DdBtn>\r\n                </DefaultBox> */}\r\n\r\n                <br />\r\n\r\n                <Nav variant=\"pills\" defaultActiveKey=\"link0\">\r\n                    <Nav.Item>\r\n                        <Nav.Link onClick={() => setTab(0)} eventKey=\"link0\">\r\n                            Active\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link onClick={() => setTab(1)} eventKey=\"link1\">\r\n                            Option 2\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                    <Nav.Item>\r\n                        <Nav.Link onClick={() => setTab(2)} eventKey=\"link2\">\r\n                            Option 3\r\n                        </Nav.Link>\r\n                    </Nav.Item>\r\n                </Nav>\r\n\r\n                <br />\r\n\r\n                {/* if문을 컴포넌트로 분리할 수도 있음  */}\r\n                <TabInner tab={tab} />\r\n\r\n                <br />\r\n            </>\r\n        );\r\n    } else {\r\n        return (\r\n            <>\r\n                <div>{id} 의 결과 아이템이 없습니다.</div>\r\n            </>\r\n        );\r\n    }\r\n\r\n    function changeIValue(e) {\r\n        setIValue(e.target.value);\r\n    }\r\n}\r\n\r\n// props 재지정이 귀찮으면 바로 parameter에서 {} 로 props 가져올 수 있음\r\nfunction TabInner({ tab }) {\r\n    let [fade, setFade] = useState(\"\");\r\n\r\n    // 자식의 자식 컴포넌트에서도 context 사용 가능\r\n    let { stock } = useContext(Context1);\r\n\r\n    useEffect(() => {\r\n        // automatic batching 기능.\r\n        // 가까이에 state 변경하는 함수가 있으면 한번만 변경됨\r\n        setTimeout(() => {\r\n            setFade(\"end\");\r\n        }, 100);\r\n\r\n        return () => {\r\n            setFade(\"\");\r\n        };\r\n    }, [tab]);\r\n\r\n    // let { tab } = props;\r\n\r\n    // switch (tab) {\r\n    //     case 0:\r\n    //         return <div>내용0</div>;\r\n    //     case 1:\r\n    //         return <div>내용1</div>;\r\n    //     case 2:\r\n    //         return <div>내용2</div>;\r\n    // }\r\n\r\n    // array 이용해서 이런 식으로도 되겠네요\r\n    // 생각 못했네...\r\n    return (\r\n        <div className={`start ${fade}`}>\r\n            {stock}\r\n            {[<div>내용0입니다</div>, <div>내용1입니다</div>, <div>내용2라네요</div>][tab]}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Detail;\r\n"],"names":["DfBtn","styled","props","color","big","css","TabInner","tab","useState","fade","setFade","stock","useContext","Context1","useEffect","setTimeout","className","shoes","ttestt","setTtestt","iValue","setIValue","setTab","dispatch","useSelector","state","useDispatch","box","document","getElementsByClassName","style","display","console","log","a","test","alert","replace","shoe","changeRecent","id","useParams","find","o","src","_PUBLIC_URL","alt","width","title","content","price","onClick","addCart","type","placeholder","onChange","e","target","value","background","variant","defaultActiveKey","eventKey"],"sourceRoot":""}